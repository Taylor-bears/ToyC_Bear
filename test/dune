; ; test/dune

; (test
;  ; 定义测试程序的名称，这也是入口 .ml 文件的名字
;  (name test_toyc_compiler)
;  ; 告诉 dune 这个测试依赖哪些库
;  (libraries ounit2 base stdio str toyc_compiler_lib))

; file: test/dune

(test
 (name lexer_test)
 (libraries ounit2 base stdio str unix toyc_compiler_lib)
 (deps
  (source_tree ../tests/lexer)))

(test
 (name parser_test)
 (libraries ounit2 base stdio str unix toyc_compiler_lib)
 (deps
  (source_tree ../tests/parser)))

(test
 (name typecheck_test)
 (libraries ounit2 base stdio str unix toyc_compiler_lib)
 (deps
  (source_tree ../tests/typecheck)))

(test
 (name codegen_test)
 (libraries ounit2 base stdio str unix toyc_compiler_lib)
 (deps
  (source_tree ../tests/codegen)))

; ==========================================================
;  2. 使用 'rule' stanza 来创建别名
; ==========================================================
; 这个规则是：当构建 'lexer' 别名时，需要依赖于 lexer_test.exe 的运行结果。
; (action (run ...)) 是关键，它告诉 Dune 这个规则需要运行一个程序。

(rule
 (alias lexer)
 (action
  (run ./lexer_test.exe)))

(rule
 (alias parser)
 (action
  (run ./parser_test.exe)))

(rule
 (alias typecheck)
 (action
  (run ./typecheck_test.exe)))

(rule
 (alias codegen)
 (action
  (run ./codegen_test.exe)))

; ==========================================================
;  3. 定义 'runtest' 别名来运行所有测试
; ==========================================================
; 'runtest' 别名依赖于所有我们刚刚创建的阶段性别名。

(alias
 (name runtest)
 (deps
  (alias lexer)
  (alias parser)
  (alias typecheck)
  (alias codegen)))
